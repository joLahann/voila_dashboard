# AUTOGENERATED! DO NOT EDIT! File to edit: 01_widgets.ipynb (unless otherwise specified).

__all__ = ['load_data', 'get_hkont_options', 'get_data', 'info_widget_children', 'get_infos', 'new_infos_widget',
           'infos_widget', 'update_infos_widget', 'new_p1_widget', 'p1_widget', 'update_p1_widget', 'new_p2_widget',
           'p2_widget', 'update_p2_widget', 'new_dataloader_widget', 'dataloader_widget']

# Cell
import pandas as pd
import ipyvuetify as v
from typing import Dict, List
import plotly.graph_objects as go
from ipyflex import FlexLayout
from nbdev.export import notebook2script

# Cell
def load_data(path):
    df = pd.read_csv('data.csv')
    bukrs_options = df['BUKRS'].value_counts()[:15].index.tolist()
    return df, bukrs_options

# Cell

df,bukrs_options = load_data('data.csv')
df.head()

# Cell
def get_hkont_options(bukrs):
    return df[df['BUKRS']==bukrs]['HKONT'].value_counts()[:15].index.tolist()


# Cell
def get_data(bukrs,hkont):
    return df[(df['BUKRS']==bukrs) & (df['HKONT']==hkont)]


# Cell
def info_widget_children(data: List[Dict], logo_url: str = None) -> v.Html:
    children = []
    if logo_url is not None:
        logo = v.Card(
            outlined=True,
            class_='ma-1',
            children=[v.Img(src=logo_url, height='100px', contain=True)],
            style_='width: calc(14.28% - 8px); min-width: 150px',
        )
        children.append(logo)

    for item in data:
        card = v.Card(
            outlined=True,
            class_='ma-1',
            children=[
                v.CardTitle(
                    primary_title=True,
                    children=[item['title']],
                    style_='font-size: 18px; color: #51ef98',
                ),
                v.CardText(children=[str(item['value'])]),
            ],
            style_='width: calc(14.28% - 8px); min-width: 150px',
        )
        children.append(card)
    return children

# Cell
def get_infos(df):
    logo_url='https://clonetrak.com/wp-content/uploads/2020/12/Dashboard-Analytics.png'
    infos = [
    ('#Einträge',len(df)),
    ('#Anomalien',100),
    ('~ Betrag',df['WRBTR'].mean().round(3)),
    ('#B. Schlüssel',len(df['BSCHL'].drop_duplicates())),
    ('#Konten',len(df['HKONT'].drop_duplicates())),
    ('#Buchungskreise',len(df['BUKRS'].drop_duplicates()))]
    infos = [{'title':i[0],'value':i[1]}for i in infos]
    return info_widget_children(infos,logo_url)


# Cell
def new_infos_widget():
    w=v.Html(
        tag='div',
        class_='d-flex flex-row',
        children=[],
        style_='flex-wrap: wrap',
    )
    return w

# Cell

infos_widget=new_infos_widget()
infos_widget

# Cell
def update_infos_widget(df,w=infos_widget):
    w.children=get_infos(df)

# Cell
def new_p1_widget():
    w = go.FigureWidget()
    w.add_trace(go.Scatter(x=[],y=[]))
    w.update_traces
    w.update_layout(
        autosize=True,
        template='plotly_dark',
        title={
            'text': 'Plot 1 Widget - WRBTR',
            'xanchor': 'center',
            'yanchor': 'top',
            'x': 0.5,
        },
    )
    return w

# Cell

p1_widget=new_p1_widget()
p1_widget

# Cell
def update_p1_widget(df,w=p1_widget):
    w.data[0].x= df.index
    w.data[0].y= df['WRBTR']


# Cell
def new_p2_widget():
    w = go.FigureWidget()
    w.add_trace(go.Scatter(x=[],y=[]))
    w.update_traces
    w.update_layout(
        autosize=True,
        template='plotly_dark',
        title={
            'text': 'Plot 2 Widget - DMBTR',
            'xanchor': 'center',
            'yanchor': 'top',
            'x': 0.5,
        },
    )
    return w

# Cell

p2_widget=new_p2_widget()
p2_widget

# Cell
def update_p2_widget(df,w=p2_widget):
    w.data[0].x= df.index
    w.data[0].y= df['DMBTR']


# Cell
def new_dataloader_widget(updaters=[]):
    sel1 = v.Select(
                v_model='',
                label='BUKRS', items=bukrs_options, class_='ma-2', outlined=False)

    def on_sel1(widget, event, data):
        sel2.items = get_hkont_options(widget.v_model)



    sel1.on_event('change', on_sel1)


    sel2 = v.Select(
                v_model='',
                label='HKONT', items=[], class_='ma-2', outlined=False)
    def on_run_button(widget, event, data):
        if sel1.v_model and sel2.v_model:
            data=get_data(sel1.v_model,sel2.v_model)
            for update_widget in updaters:
                update_widget(data)

    run_button = v.Btn(color='primary', class_='ma-2', children=[

            v.Icon(left=True, children=['mdi-play']), 'Run Search '
        ])
    run_button.on_event('click', on_run_button)

    data_loader_widget = v.Layout(children=[
      sel1,sel2,run_button

    ])
    return data_loader_widget

# Cell
dataloader_widget=new_dataloader_widget(updaters=[update_infos_widget,update_p1_widget,update_p2_widget])
dataloader_widget